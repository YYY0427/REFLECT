#pragma once
#include <DxLib.h>
#include <memory>
#include <deque>
#include "../Math/Vector3.h"
#include "../Util/Timer.h"
#include "../Editor/DataReaderFromUnity.h"

// プロトタイプ宣言
class Model;
class Shield;
class Gauge;

/// <summary>
/// プレイヤークラス
/// </summary>
class Player
{
public:
	// コンストラクタ
	Player(UnityGameObject data);

	// デストラクタ
	~Player();

	// 更新
	void Update(float cameraHorizon);
	void GameOverUpdate();

	// 描画
	void Draw();

	// プレイヤーのダメージ処理
	void OnDamage();

	/// <summary>
	/// プレイヤーが生きているか
	/// </summary>
	/// <returns>true : 生きている, false : 死んでいる</returns>
	bool IsLive() const;

	// 位置情報の取得
	Vector3 GetPos() const;

	// プレイヤーの当たり判定の半径の取得
	float GetCollsionRadius() const;

	// プレイヤーモデルのハンドルの取得
	int GetModelHandle() const;

	// シールドのインスタンスの取得
	std::shared_ptr<Shield> GetShield() const;

	// 決められたフレームの数だけ位置情報を保存するテーブルの取得
	std::deque<Vector3> GetPosLogTable() const;

private:
	// ポインタ
	std::shared_ptr<Model> m_pModel;
	std::shared_ptr<Shield> m_pShield;
	std::shared_ptr<Gauge> m_pHPbar;

	// 決められたフレーム前まで位置情報を保存しているテーブル
	std::deque<Vector3> m_posLogTable;

	// 位置情報
	Vector3 m_pos;

	// 回転情報
	Vector3 m_rot;

	// 拡大率
	Vector3 m_scale;

	// 移動ベクトル
	Vector3 m_moveVec;

	// プレイヤーの移動速度
	float m_moveSpeed;

	// 命
	int m_hp;

	// 左スティックが入力されたか
	bool m_isInputLeftStick;

	// エフェクト
	int m_boostEffectHandle;		// ブーストエフェクトハンドル
	Vector3 m_boostEffectScale;		// ブーストエフェクトの拡大率
	float m_boostEffectSpeed;		// ブーストエフェクトの再生速度
	int m_playerDeadEffectHandle;	// プレイヤー死亡エフェクトハンドル
	bool m_isPlayerDeadEffect;		// プレイヤー死亡エフェクトの再生フラグ

	// タイマー
	int m_ultimateTimer;		// 無敵時間のタイマー
	Timer<int> m_waitTimer;		// 待機時間のタイマー
};